// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePayment {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateWaiter {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPayment(data: PaymentCreateInput!): Payment!
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updateManyPayments(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): BatchPayload!
  upsertPayment(where: PaymentWhereUniqueInput!, create: PaymentCreateInput!, update: PaymentUpdateInput!): Payment!
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createWaiter(data: WaiterCreateInput!): Waiter!
  updateWaiter(data: WaiterUpdateInput!, where: WaiterWhereUniqueInput!): Waiter
  updateManyWaiters(data: WaiterUpdateManyMutationInput!, where: WaiterWhereInput): BatchPayload!
  upsertWaiter(where: WaiterWhereUniqueInput!, create: WaiterCreateInput!, update: WaiterUpdateInput!): Waiter!
  deleteWaiter(where: WaiterWhereUniqueInput!): Waiter
  deleteManyWaiters(where: WaiterWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Payment {
  id: ID!
  amount: Int!
  type: String!
  transaction: Transaction!
}

type PaymentConnection {
  pageInfo: PageInfo!
  edges: [PaymentEdge]!
  aggregate: AggregatePayment!
}

input PaymentCreateInput {
  id: ID
  amount: Int!
  type: String!
  transaction: TransactionCreateOneWithoutPaymentsInput!
}

input PaymentCreateManyWithoutTransactionInput {
  create: [PaymentCreateWithoutTransactionInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateWithoutTransactionInput {
  id: ID
  amount: Int!
  type: String!
}

type PaymentEdge {
  node: Payment!
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  type_ASC
  type_DESC
}

type PaymentPreviousValues {
  id: ID!
  amount: Int!
  type: String!
}

input PaymentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [PaymentScalarWhereInput!]
  OR: [PaymentScalarWhereInput!]
  NOT: [PaymentScalarWhereInput!]
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
  AND: [PaymentSubscriptionWhereInput!]
  OR: [PaymentSubscriptionWhereInput!]
  NOT: [PaymentSubscriptionWhereInput!]
}

input PaymentUpdateInput {
  amount: Int
  type: String
  transaction: TransactionUpdateOneRequiredWithoutPaymentsInput
}

input PaymentUpdateManyDataInput {
  amount: Int
  type: String
}

input PaymentUpdateManyMutationInput {
  amount: Int
  type: String
}

input PaymentUpdateManyWithoutTransactionInput {
  create: [PaymentCreateWithoutTransactionInput!]
  delete: [PaymentWhereUniqueInput!]
  connect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutTransactionInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutTransactionInput!]
  deleteMany: [PaymentScalarWhereInput!]
  updateMany: [PaymentUpdateManyWithWhereNestedInput!]
}

input PaymentUpdateManyWithWhereNestedInput {
  where: PaymentScalarWhereInput!
  data: PaymentUpdateManyDataInput!
}

input PaymentUpdateWithoutTransactionDataInput {
  amount: Int
  type: String
}

input PaymentUpdateWithWhereUniqueWithoutTransactionInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutTransactionDataInput!
}

input PaymentUpsertWithWhereUniqueWithoutTransactionInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutTransactionDataInput!
  create: PaymentCreateWithoutTransactionInput!
}

input PaymentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  transaction: TransactionWhereInput
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
}

input PaymentWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  name: String!
  category: String
  price: Int!
  quantity: Int!
  transaction: Transaction!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  category: String
  price: Int!
  quantity: Int!
  transaction: TransactionCreateOneWithoutProductsInput!
}

input ProductCreateManyWithoutTransactionInput {
  create: [ProductCreateWithoutTransactionInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutTransactionInput {
  id: ID
  name: String!
  category: String
  price: Int!
  quantity: Int!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  category: String
  price: Int!
  quantity: Int!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  category: String
  price: Int
  quantity: Int
  transaction: TransactionUpdateOneRequiredWithoutProductsInput
}

input ProductUpdateManyDataInput {
  name: String
  category: String
  price: Int
  quantity: Int
}

input ProductUpdateManyMutationInput {
  name: String
  category: String
  price: Int
  quantity: Int
}

input ProductUpdateManyWithoutTransactionInput {
  create: [ProductCreateWithoutTransactionInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutTransactionInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutTransactionInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateWithoutTransactionDataInput {
  name: String
  category: String
  price: Int
  quantity: Int
}

input ProductUpdateWithWhereUniqueWithoutTransactionInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutTransactionDataInput!
}

input ProductUpsertWithWhereUniqueWithoutTransactionInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutTransactionDataInput!
  create: ProductCreateWithoutTransactionInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  transaction: TransactionWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment]!
  paymentsConnection(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  waiter(where: WaiterWhereUniqueInput!): Waiter
  waiters(where: WaiterWhereInput, orderBy: WaiterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Waiter]!
  waitersConnection(where: WaiterWhereInput, orderBy: WaiterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WaiterConnection!
  node(id: ID!): Node
}

type Subscription {
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  waiter(where: WaiterSubscriptionWhereInput): WaiterSubscriptionPayload
}

type Transaction {
  id: ID!
  table: Int!
  clientName: String
  zone: String
  dateOpen: DateTime!
  dateClose: DateTime!
  waiter: Waiter!
  total: Int
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  table: Int!
  clientName: String
  zone: String
  dateOpen: DateTime!
  dateClose: DateTime!
  waiter: WaiterCreateOneInput!
  total: Int
  payments: PaymentCreateManyWithoutTransactionInput
  products: ProductCreateManyWithoutTransactionInput
}

input TransactionCreateOneWithoutPaymentsInput {
  create: TransactionCreateWithoutPaymentsInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateOneWithoutProductsInput {
  create: TransactionCreateWithoutProductsInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateWithoutPaymentsInput {
  id: ID
  table: Int!
  clientName: String
  zone: String
  dateOpen: DateTime!
  dateClose: DateTime!
  waiter: WaiterCreateOneInput!
  total: Int
  products: ProductCreateManyWithoutTransactionInput
}

input TransactionCreateWithoutProductsInput {
  id: ID
  table: Int!
  clientName: String
  zone: String
  dateOpen: DateTime!
  dateClose: DateTime!
  waiter: WaiterCreateOneInput!
  total: Int
  payments: PaymentCreateManyWithoutTransactionInput
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  table_ASC
  table_DESC
  clientName_ASC
  clientName_DESC
  zone_ASC
  zone_DESC
  dateOpen_ASC
  dateOpen_DESC
  dateClose_ASC
  dateClose_DESC
  total_ASC
  total_DESC
}

type TransactionPreviousValues {
  id: ID!
  table: Int!
  clientName: String
  zone: String
  dateOpen: DateTime!
  dateClose: DateTime!
  total: Int
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  table: Int
  clientName: String
  zone: String
  dateOpen: DateTime
  dateClose: DateTime
  waiter: WaiterUpdateOneRequiredInput
  total: Int
  payments: PaymentUpdateManyWithoutTransactionInput
  products: ProductUpdateManyWithoutTransactionInput
}

input TransactionUpdateManyMutationInput {
  table: Int
  clientName: String
  zone: String
  dateOpen: DateTime
  dateClose: DateTime
  total: Int
}

input TransactionUpdateOneRequiredWithoutPaymentsInput {
  create: TransactionCreateWithoutPaymentsInput
  update: TransactionUpdateWithoutPaymentsDataInput
  upsert: TransactionUpsertWithoutPaymentsInput
  connect: TransactionWhereUniqueInput
}

input TransactionUpdateOneRequiredWithoutProductsInput {
  create: TransactionCreateWithoutProductsInput
  update: TransactionUpdateWithoutProductsDataInput
  upsert: TransactionUpsertWithoutProductsInput
  connect: TransactionWhereUniqueInput
}

input TransactionUpdateWithoutPaymentsDataInput {
  table: Int
  clientName: String
  zone: String
  dateOpen: DateTime
  dateClose: DateTime
  waiter: WaiterUpdateOneRequiredInput
  total: Int
  products: ProductUpdateManyWithoutTransactionInput
}

input TransactionUpdateWithoutProductsDataInput {
  table: Int
  clientName: String
  zone: String
  dateOpen: DateTime
  dateClose: DateTime
  waiter: WaiterUpdateOneRequiredInput
  total: Int
  payments: PaymentUpdateManyWithoutTransactionInput
}

input TransactionUpsertWithoutPaymentsInput {
  update: TransactionUpdateWithoutPaymentsDataInput!
  create: TransactionCreateWithoutPaymentsInput!
}

input TransactionUpsertWithoutProductsInput {
  update: TransactionUpdateWithoutProductsDataInput!
  create: TransactionCreateWithoutProductsInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  table: Int
  table_not: Int
  table_in: [Int!]
  table_not_in: [Int!]
  table_lt: Int
  table_lte: Int
  table_gt: Int
  table_gte: Int
  clientName: String
  clientName_not: String
  clientName_in: [String!]
  clientName_not_in: [String!]
  clientName_lt: String
  clientName_lte: String
  clientName_gt: String
  clientName_gte: String
  clientName_contains: String
  clientName_not_contains: String
  clientName_starts_with: String
  clientName_not_starts_with: String
  clientName_ends_with: String
  clientName_not_ends_with: String
  zone: String
  zone_not: String
  zone_in: [String!]
  zone_not_in: [String!]
  zone_lt: String
  zone_lte: String
  zone_gt: String
  zone_gte: String
  zone_contains: String
  zone_not_contains: String
  zone_starts_with: String
  zone_not_starts_with: String
  zone_ends_with: String
  zone_not_ends_with: String
  dateOpen: DateTime
  dateOpen_not: DateTime
  dateOpen_in: [DateTime!]
  dateOpen_not_in: [DateTime!]
  dateOpen_lt: DateTime
  dateOpen_lte: DateTime
  dateOpen_gt: DateTime
  dateOpen_gte: DateTime
  dateClose: DateTime
  dateClose_not: DateTime
  dateClose_in: [DateTime!]
  dateClose_not_in: [DateTime!]
  dateClose_lt: DateTime
  dateClose_lte: DateTime
  dateClose_gt: DateTime
  dateClose_gte: DateTime
  waiter: WaiterWhereInput
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type Waiter {
  id: ID!
  name: String!
}

type WaiterConnection {
  pageInfo: PageInfo!
  edges: [WaiterEdge]!
  aggregate: AggregateWaiter!
}

input WaiterCreateInput {
  id: ID
  name: String!
}

input WaiterCreateOneInput {
  create: WaiterCreateInput
  connect: WaiterWhereUniqueInput
}

type WaiterEdge {
  node: Waiter!
  cursor: String!
}

enum WaiterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type WaiterPreviousValues {
  id: ID!
  name: String!
}

type WaiterSubscriptionPayload {
  mutation: MutationType!
  node: Waiter
  updatedFields: [String!]
  previousValues: WaiterPreviousValues
}

input WaiterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WaiterWhereInput
  AND: [WaiterSubscriptionWhereInput!]
  OR: [WaiterSubscriptionWhereInput!]
  NOT: [WaiterSubscriptionWhereInput!]
}

input WaiterUpdateDataInput {
  name: String
}

input WaiterUpdateInput {
  name: String
}

input WaiterUpdateManyMutationInput {
  name: String
}

input WaiterUpdateOneRequiredInput {
  create: WaiterCreateInput
  update: WaiterUpdateDataInput
  upsert: WaiterUpsertNestedInput
  connect: WaiterWhereUniqueInput
}

input WaiterUpsertNestedInput {
  update: WaiterUpdateDataInput!
  create: WaiterCreateInput!
}

input WaiterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [WaiterWhereInput!]
  OR: [WaiterWhereInput!]
  NOT: [WaiterWhereInput!]
}

input WaiterWhereUniqueInput {
  id: ID
}
`